<template>
  <Page class="demo-scroll-table">
    <AppBar class="app-bar" v-if="!globalConfig.isWx">
      <img
        slot="left"
        src="../../assets/imgs/common/icon/icon_goback.png"
        class="icon icon-back"
        @click="$router.go(-1)"
      />
      <!-- AXPROPOSALSHARE -->
      <template slot="center">
        利益演示表
      </template>
    </AppBar>
    <AppContent class="app-content">
      <FormRadio
        v-if="
          this.$route.params.productCode == 'APWB01' ||
            this.$route.params.productCode == 'RPPB01'
        "
        v-model="divide"
        :selectList="productSelectList"
      ></FormRadio>
      <ScrollTable
        :leftHeader="leftHeader"
        :leftList="leftList"
        :rightHeader="rightHeader"
        :rightList="rightList"
        :tableHeight="tableHeight"
      ></ScrollTable>
    </AppContent>
  </Page>
</template>

<script>
import ScrollTable from "../../components/common/ScrollTable";
import FormRadio from "@/components/common/form/FormRadio";
export default {
  name: "showTable",
  components: {
    ScrollTable,
    FormRadio
  },
  data() {
    return {
      divide: "0",
      productSelectList: [
        {
          code: "0",
          desc: "低档分红"
        },
        {
          code: "2",
          desc: "中档分红"
        },
        {
          code: "1",
          desc: "高档分红"
        }
      ],
      tableList: [],
      // 左侧头
      leftHeader: [],
      // 左侧list
      leftList: [],
      // 右侧头
      rightHeader: [],
      // 右侧list
      rightList: [],
      tableHeight: utils.ui.getClientHeight() // table高度
    };
  },
  computed: {},
  watch: {},
  created() {
    this.tableList = this.transDataLine(
      this.$route.params.benifitOutLineItemDtoList
    );
    console.log(this.tableList);
    this.leftHeader = this.tableList.leftHeader;
    this.leftList = this.tableList.leftList;
    this.rightHeader = this.tableList.rightHeader;
    console.log(this.rightHeader);
    this.rightList = this.tableList.rightList;
    // console.log(this.rightList);
  },

  methods: {
    //转义行数据=>scollTable参数
    transDataLine(dataLine, fixedRowCount = 2) {
      //将数据从itemAttr属性中拿出来
      dataLine = dataLine.map(line => line.itemAttr);
      //头部数据
      const header = dataLine[0].map((item, index) => {
        return {
          param: item, //键
          paramIndex: index, //属性在原始数组的下标
          desc: item //描述
        };
      });
      //左头部
      const leftHeader = header.slice(0, fixedRowCount);
      //右头部
      const rightHeader = header.slice(fixedRowCount);
      //左list
      const leftList = dataLine.slice(1).map(item => {
        const returnItem = {};
        leftHeader.forEach(header => {
          returnItem[header.param] = item[header.paramIndex];
        });
        return returnItem;
      });
      //右list
      const rightList = dataLine.slice(1).map(item => {
        const returnItem = {};
        rightHeader.forEach(header => {
          returnItem[header.param] = item[header.paramIndex];
        });
        return returnItem;
      });
      //返回scollTable参数
      return {
        leftHeader,
        rightHeader,
        leftList,
        rightList
      };
    }
  }
};
</script>

<style lang="scss" scoped>
.app-bar {
  font-family: HYQiHei-DES;
  .icon {
    height: auto;
    &.icon-back {
      width: 11.5px;
    }
  }
}
.app-content {
  margin-top: 50px;
}
</style>
