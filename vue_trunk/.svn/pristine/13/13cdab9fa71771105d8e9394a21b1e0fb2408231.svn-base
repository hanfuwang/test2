<template>
  <div class="form-amount">
    <!-- input -->
    <FormInput
      class="form-input"
      v-model="iptValue"
      :label="label"
      type="tel"
      :rules="rules"
      :placeholder="placeholder"
      :disabled="disabled"
      :showRequire="showRequire"
      @updateVali="handlerUpdateVali"
      ref="fi"
    ></FormInput>
  </div>
</template>

<script>
import FormInput from "./FormInput";
export default {
  name: "formAmount",
  components: {
    FormInput
  },
  props: {
    // 左侧的label描述
    label: {
      type: String,
      default: undefined
    },
    // value值
    value: {
      type: Number,
      default: undefined
    },
    // amount最大值
    max: {
      type: Number,
      default: 99999999
    },
    // rules校验规则
    rules: {
      type: Array,
      default: () => {
        return [];
      }
    },
    // placeholder
    placeholder: {
      type: String,
      default: undefined
    },
    // disabled
    disabled: {
      type: Boolean,
      default: false
    },
    // 是否在必填的时候显示*
    showRequire: {
      type: Boolean,
      default: true
    }
  },
  data() {
    return {
      iptValue: "", // 当前输入的值
      // 当前验证状态
      vali: {
        status: false, // 校验结果，符合rules为true，不符合为false
        msg: "" // 校验信息
      }
    };
  },
  computed: {},
  watch: {
    // 监听value
    value: {
      handler(newVal, oldVal) {
        // 非初始为0的情况，更新iptValue
        if (!(newVal === 0 && oldVal === undefined)) {
          this.iptValue = this.transToThousands(newVal);
        }
      },
      // 立即执行
      immediate: true
    },
    // 监听iptValue
    iptValue(newVal, oldVal) {
      if (newVal) {
        // 有值的情况
        // 当前千分位对应的数值
        const numberValue = this.transToNumber(this.iptValue);
        if (isNaN(numberValue) || numberValue > this.max) {
          // 非数字 || 数字超长，重置到oldVal
          this.iptValue = oldVal;
        } else {
          // 合法数字，进行赋值
          this.iptValue = this.transToThousands(numberValue);
        }
      }

      // 更新formInput组件的iptValue
      this.$refs.fi.iptValue = this.iptValue;
      // 转数字更新value
      this.$emit("input", this.transToNumber(this.iptValue));
    }
  },
  created() {},
  methods: {
    // 千分位转为数字
    transToNumber(thousands) {
      // 去千分位的,符号
      const regExp = /,/g;
      const number = Number(thousands.replace(regExp, ""));
      return number;
    },
    // 千分位转换：3333 => 3,333
    transToThousands(number) {
      // number转字符串
      if (typeof number === "number") {
        number += "";
      }
      const regExp = /(\d{1,3})(?=(\d{3})+(?:$|\.))/g;
      const thousands = number.replace(regExp, "$1,");
      return thousands;
    },
    // 根组件vali更新处理：更新当前组件的vali，保持同步
    handlerUpdateVali(vali) {
      this.vali = vali;
    }
  }
};
</script>

<style lang="scss" scoped>
.form-amount {
  position: relative;
}
</style>
