<template>
  <section class="additional-risk">
    <div v-for="(item, index) in AllRiskList" :key="index">
      <div @click="handleSelectRisk(index)">
        <span class="circle" v-if="item.productName != ''"></span>
        <span class="desc">{{ item.productName }}</span>
      </div>

      <!--附加险按钮配置 -->
      <div v-show="item.isSelect">
        <!-- 配置选项-->
        <content v-for="(etl, index) in item.attList" :key="index">
          <RiskSettingSelect
            :label="etl.attName"
            :list="etl.attValueList"
            :selectCode="etl.attValue"
            @handle="SelectEtl"
            v-if="etl.attValueList.length > 0"
          />
        </content>
      </div>
    </div>
  </section>
</template>

<script>
import RiskSettingSelect from "./RiskSettingSelect";
import { mapState } from "vuex";

export default {
  name: "additionalRisk",
  components: { RiskSettingSelect },
  props: {
    //传进来的险种信息 附带附加险
    SelectMain: {
      type: Object,
      default: function() {
        return {};
      }
    },
    //传进来的主险选项
    mainSetting: {
      type: Object,
      default: function() {
        return {};
      }
    }
  },
  data() {
    return {
      AllRiskList: [], //传递过来的附加险
      MainSettingList: [], //主险选项
      //附加险种配置
      selectRiskCode: "" //选中附加险code
    };
  },
  mounted() {
    console.log(this.SelectMain);
    //传递过来的附加险重新赋值
    this.AllRiskList = this.SelectMain.extraList;
    //主险选项
    this.MainSettingList = this.mainSetting;
    this.initIsSelect(); //初始化附加险选中及豁免险标识
  },
  computed: {
    ...mapState({
      mainProposalProductList: state => state.plan.mainProposalProductList, //主险列表
      riskProposalProductList: state => state.plan.riskProposalProductList, //附加险列表
      insurant: state => state.plan.insurant //被保人信息
    })
  },
  watch: {
    MainSettingList: {
      handler(newVal, oldVal) {
        console.log(newVal, oldVal);
        this.MainSettingList = newVal;
        let huomian = this.AllRiskList.filter(item => {
          if (item.isSelect && item.isHuoMian == "1") return item;
        });
        if (huomian.length > 0) this.DealHuoMian(huomian[0]);
      },
      deep: true
    }
  },
  created() {},
  methods: {
    initIsSelect() {
      this.AllRiskList.map(
        item => ((item.isSelect = false), (item.isHuoMian = "0"))
      );
    },
    handleSelectRisk(num) {
      this.AllRiskList.forEach((item, index) => {
        if (index == num) {
          item.isSelect = !item.isSelect;
          if (item.isSelect) this.selectRiskCode = item.productCode;
          item.additional.forEach(element => {
            //豁免险处理
            if (element.key == "huomian" && element.value == "yes") {
              item.isHuoMian = "1";
              this.DealHuoMian(item);
            }
          });
          //赋默认值
          item.attList.forEach(data => {
            if (data.attValueList[0] != undefined) {
              if (!data.attValue) {
                data.attValue = data.attValueList[0].code;
              }
            }
            if (data.attCode == "policyPeriod") {
              data.attName = "保险期间";
            } else if (data.attCode == "payPeriod") {
              data.attName = "交费期间";
            } else if (data.attCode == "payMode") {
              data.attName = "交费频次";
            } else if (data.attCode == "amount") {
              data.attName = "基本保险金额";
            } else if (data.attCode == "premium") {
              data.attName = "保险费";
            } else if (data.attCode == "rank") {
              data.attName = "保障计划";
            } else if (data.attCode == "drawMode") {
              data.attName = "领取方式";
            } else if (data.attCode == "drawStartAge") {
              data.attName = "年金开始领取年龄";
            } else if (data.attCode == "drawFreq") {
              data.attName = "年金领取频率";
            } else if (data.attCode == "exceptAmt") {
              data.attName = "次免赔额";
            } else if (data.attCode == "claimRate") {
              data.attName = "赔付比例";
            }
          });
          this.$forceUpdate();
          console.log(item);
        }
      });
    },
    isContains(str, substr) {
      return new RegExp(substr).test(str);
    },
    //获得周岁年龄
    GetAge(strBirthday) {
      let returnAge;
      let strBirthdayArr = strBirthday.split("-");
      let birthYear = strBirthdayArr[0];
      let birthMonth = strBirthdayArr[1];
      let birthDay = strBirthdayArr[2];

      let d = new Date();
      let nowYear = d.getFullYear();
      let nowMonth = d.getMonth() + 1;
      let nowDay = d.getDate();

      if (nowYear == birthYear) {
        returnAge = 0; //同年 则为0岁
      } else {
        let ageDiff = nowYear - birthYear; //年之差
        if (ageDiff > 0) {
          if (nowMonth == birthMonth) {
            let dayDiff = nowDay - birthDay; //日之差
            if (dayDiff < 0) {
              returnAge = ageDiff - 1;
            } else {
              returnAge = ageDiff;
            }
          } else {
            let monthDiff = nowMonth - birthMonth; //月之差
            if (monthDiff < 0) {
              returnAge = ageDiff - 1;
            } else {
              returnAge = ageDiff;
            }
          }
        } else {
          returnAge = -1; //返回-1 表示出生日期输入错误 晚于今天
        }
      }
      return returnAge; //返回周岁年龄
    },
    DealHuoMian(data) {
      // 处理豁免险
      //交费期间预处理
      let productTerm = [];
      productTerm.push({ code: "single", text: "一次交清" });
      for (let n = 1; n <= 110; n++) {
        if (productTerm.length <= 110) {
          productTerm.push({ code: "term_" + n, text: n + "年期" });
        }
      }
      //处理逻辑
      console.log(this.MainSettingList);
      if (data.attList == undefined) return;
      data.attList.forEach(val => {
        //缴费方式
        if (val.attCode == "payMode") {
          this.SelectMain.attList.filter(key => {
            if (key.attCode == "payMode") {
              val.attValueList =
                key.attValueList &&
                key.attValueList.filter(item => {
                  return this.MainSettingList.payMode.includes(item.code);
                });
              val.attValue = this.MainSettingList.payMode;
              val.attText = key.attText;
            }
          });
          //交费期限
        } else if (val.attCode == "payPeriod") {
          this.SelectMain.attList.filter(key => {
            if (key.attCode == "payPeriod") {
              //几年期
              if (this.isContains(this.MainSettingList.payPeriod, "term_")) {
                let numl = parseInt(
                  this.MainSettingList.payPeriod.replace("term_", "")
                );
                val.attValue = "term_" + (numl - 1);
                val.attText = numl - 1 + "年期";
              } else if (
                //至多少岁
                this.isContains(this.MainSettingList.payPeriod, "to_") &&
                !this.isContains(this.MainSettingList.payPeriod, "to_full")
              ) {
                let agel = parseInt(
                  this.MainSettingList.payPeriod.replace("to_", "")
                );
                let age = this.GetAge(this.insurant.birthdate);
                val.attValue = "term_" + (agel - age - 1);
                val.attText = agel - age - 1 + "年期";
              } else if (
                this.isContains(this.MainSettingList.payPeriod, "single")
              ) {
                //暂时处理一次交清
                val.attValue = "single";
                val.attText = "一次交清";
              }
              let a = productTerm.filter(item => {
                return val.attValue.includes(item.code);
              });
              val.attValueList = a;
            }
          });
          console.log(val);
          //保险期间
        } else if (val.attCode == "policyPeriod") {
          this.SelectMain.attList.filter(key => {
            if (key.attCode == "policyPeriod") {
              val.attValueList =
                key.attValueList &&
                key.attValueList.filter(item => {
                  return this.MainSettingList.policyPeriod.includes(item.code);
                });
              val.attValue = this.MainSettingList.policyPeriod;
              val.attText = key.attText;
            }
          });
        }
      });
    },
    SelectEtl(item) {
      console.log(item);
      let SelectRisk = this.AllRiskList.filter(val => {
        if (this.selectRiskCode == val.productCode) return val;
      });
      console.log(SelectRisk[0]);
      console.log(this.MainSettingList);
    }
  }
};
</script>

<style lang="scss" scoped>
@import "@/assets/css/common/form.scss";
.additional-risk {
  @include overflow-emphasis;
  width: 320px;
  margin: 5px 0;
  &.active {
    .circle {
      @include small-circle(12px, 4px, solid, #4ac4a3);
    }
    .desc {
      color: $font-color;
    }
  }
  // 圆圈
  .circle {
    @include small-circle(12px, 1px, solid, #4ac4a3);
    border-radius: 50%;
    margin-right: 20px;
    transition: border-width 0.2s ease-out;
    display: inline-block;
  }
  // 描述
  .desc {
    @include overflow-emphasis;
    font-size: $font-size;
    color: #333;
  }
}
</style>
