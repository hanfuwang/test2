<template>
  <div class="selector">
    <!-- 头部搜索bar -->
    <section class="search-bar">
      <!-- 左侧返回箭头 -->
      <img
        class="icon icon-back"
        src="@/assets/imgs/common/icon/icon_back.png"
        @click="back"
      />
      <!-- 搜索框 -->
      <input
        class="search-ipt"
        type="search"
        :placeholder="searchPlaceholder"
        v-model="keywords"
        @focus="handlerIptFocus"
        @blur="handlerIptBlur"
      />
      <!-- 右侧搜索按钮 -->
      <img
        v-show="selectType === 'search'"
        class="icon icon-search"
        src="@/assets/imgs/common/icon/icon_search.png"
        @click="search"
      />
    </section>

    <!-- 点击结果 -->
    <section
      class="click-result result-content"
      v-show="selectType === 'click'"
    >
      <!-- click-top-list -->
      <div class="click-top-list" v-show="clickTopList.length > 0">
        <p
          class="result-line"
          v-for="(item, index) of clickTopList"
          :key="item.agentcom"
          @click="handlerClickItemClick(item, index)"
        >
          {{ item[descParam] }}
        </p>
      </div>

      <!-- click-bottom-list -->
      <div class="click-bottom-list" v-show="clickBottomList.length > 0">
        <p
          class="result-line"
          v-for="item of clickBottomList"
          :key="item.agentcom"
          @click="handlerClickItemClick(item, 'next')"
        >
          {{ item[descParam] }}
        </p>
      </div>
    </section>

    <!-- 搜索结果 -->
    <section
      class="search-result result-content"
      v-show="selectType === 'search'"
    >
      <!-- 有数据 -->
      <div class="have-data" v-show="searchResult && searchResult.length > 0">
        <p
          class="result-line"
          v-for="item of searchResult"
          :key="item.agentcom"
          @click="select(item)"
        >
          {{ item[descParam] }}
        </p>
      </div>
      <!-- 无数据 -->
      <div class="no-data" v-show="!searchResult || searchResult.length == 0">
        {{ hadSearch ? "暂无数据" : "请输入关键字后开始搜索" }}
      </div>
    </section>
  </div>
</template>

<script>
export default {
  name: "selector",
  props: {
    // selector类型：bank：银行，job：职业，area：地区
    type: {
      type: String,
      default: "bank"
    }
  },
  data() {
    return {
      isIptFocus: false, // 输入框是否获取焦点
      selectType: "click", // 选择类型，click直接选择，search查找后选择
      keywords: "", // 搜索关键字
      hadSearch: false, // 是否已经搜索过
      // click栈
      clickStack: [],
      // 点击结果
      clickResult: [],
      // 搜索结果
      searchResult: []
    };
  },
  computed: {
    // click上部内容
    clickTopList() {
      return this.clickStack;
    },
    // click下部内容
    clickBottomList() {
      if (this.clickStack.length > 0) {
        // 有clickStack，显示堆栈最后一个元素的sonList
        return this.clickStack[this.clickStack.length - 1].sonList;
      } else {
        // 没有clickStack，显示clickResult(第一层)
        return this.clickResult;
      }
    },
    // search的placeholder
    searchPlaceholder() {
      switch (this.type) {
        case "bank": {
          return "请输入网点名称";
        }
        case "job": {
          return "请输入职业";
        }
        case "area": {
          return "请输入地址";
        }
        default: {
          return "请输入网点名称";
        }
      }
    },
    // 不同的选择器desc取值字段不同
    descParam() {
      switch (this.type) {
        case "bank": {
          return "bankName";
        }
        case "job": {
          return "";
        }
        case "area": {
          return "";
        }
        default: {
          return "bankName";
        }
      }
    }
  },
  created() {
    // 初始化组件
    this.initComp();
  },
  methods: {
    // 初始化组件
    async initComp() {
      // 初始化第一级clickResult
      this.clickResult = await this.getNextLevelList("");
    },

    // 根据id查询下一级的list
    getNextLevelList(id) {
      // 分type查询
      return this[`${this.type}GetNextLevelList`](id);
    },
    // 根据id查询下一级的list：银行
    bankGetNextLevelList(agentcom) {
      return new Promise(resovle => {
        // params
        const params = {
          agentcom: agentcom
        };

        // http
        utils.http
          .post(interfaces.global.queryNextLevalAgencyList, params)
          .then(res => {
            if (Array.isArray(res.orgAgencyList)) {
              resovle(res.orgAgencyList);
            } else {
              resovle([]);
            }
          });
      });
    },

    // 查询
    search() {
      // 调用对应的search方法
      this[`${this.type}Search`]();
    },
    // 查询：银行
    bankSearch() {
      // 请求参数
      const params = {
        bankName: this.keywords
      };
      // http：模糊查询网点列表
      utils.http.post(interfaces.global.queryAgencyList, params).then(res => {
        // 设置当前已经搜索过
        this.hadSearch = true;
        // 赋值列表
        if (Array.isArray(res.orgAgencyList)) {
          this.searchResult = res.orgAgencyList;
        } else {
          this.searchResult = [];
        }
      });
    },

    // 返回
    back() {
      if (this.selectType === "search") {
        // search状态：返回到click
        this.selectType = "click";
      } else if (this.selectType === "click") {
        // 关闭页面
        this.$emit("close");
      }
    },
    // 选中
    select(item) {
      this.$emit("select", item);
    },

    // clickitem click处理
    async handlerClickItemClick(item, deep) {
      // 获取子数据
      if (!item.sonList) {
        item.sonList = await this.getNextLevelList(item.agentcom);
      }

      if (item.sonList.length === 0) {
        // 查不到子元素了，证明是根节点了
        this.$emit("select", item);
        return;
      }

      // 不是根节点
      if (deep > this.clickStack.length || deep === "next") {
        // 向下点
        // 添加当前点
        this.clickStack.push(item);
      } else if (deep === this.clickStack.length) {
        // 同级点--暂时不存在这种情况
        // 删除原有点
        this.clickStack.pop();
        // 添加当前点
        this.clickStack.push(item);
      } else if (deep < this.clickStack.length) {
        // 回点
        // 删除下级数据
        this.clickStack.splice(deep);
      }
    },
    // ipt得到焦点
    handlerIptFocus() {
      this.isIptFocus = true;
      this.selectType = "search";
    },
    // ipt失去焦点
    handlerIptBlur() {
      this.isIptFocus = false;
      // ios微信键盘bug修复 开始
      if (globalConfig.isWx && globalConfig.os === "ios") {
        // 获取当前滚动的高度
        const scrollTop = utils.ui.getScrollTop();
        setTimeout(() => {
          // 向上滚动1px，防止键盘顶出的高度不回弹
          window.scrollTo(0, scrollTop - 1);
        }, 100);
      }
    }
  }
};
</script>

<style lang="scss" scoped>
$search-bar-height: 60px;

.selector {
  border-top: 1px solid rgba(255, 255, 255, 0);
  position: fixed;
  left: 0;
  top: 0;
  width: 100vw;
  height: 100vh;
  background: #ffffff;
  z-index: $zIndex-popup;
}

// search-bar
.search-bar {
  @include display-flex;
  justify-content: space-between;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: $search-bar-height;
  padding: 0 20px;
  box-shadow: 0 -2px 8px 0 rgba(0, 0, 0, 0.1);
  background: #ffffff;
  z-index: 1;
  .search-ipt {
    @include reset-input;
    @include display-flex;
    height: 34px;
    line-height: 20px;
    justify-content: flex-start;
    flex: 1;
    background: #f3f3f3;
    border-radius: 17px;
    font-size: 14px;
    color: #000000;
    padding: 0 20px;
    letter-spacing: 1px;
    // x去除
    &::-webkit-search-cancel-button {
      display: none;
    }
    // placeholder样式重写
    &::placeholder {
      font-size: 15px;
      color: #c0c0c0;
      text-align: center;
    }
  }
  .icon {
    height: auto;
    &.icon-back {
      width: 12px;
      margin-right: 10px;
    }
    &.icon-search {
      width: 20px;
      margin-left: 10px;
    }
  }
}

// 结果
.result-content {
  position: relative;
  margin-top: $search-bar-height;
  padding: 0 20px;
  height: calc(100vh - #{$search-bar-height});
  overflow-y: scroll;
  -webkit-overflow-scrolling: touch;
  .result-line {
    @include overflow-emphasis;
    @include lineheight-height(42px);
    font-size: 15px;
    padding: 0 10px;
    border-bottom: 1px solid #f3f3f3;
  }
}

// click-result
.click-result {
  .result-line {
    color: #7e7e7e;
  }
  .click-top-list {
    margin: 0 -20px;
    padding: 0 20px;
    border-bottom: 4px solid #f3f3f3;
    .result-line {
      font-size: 17px;
      color: #000000;
    }
  }
}

// search-result
.search-result {
  .result-line {
    color: #333333;
  }
  // no-data
  .no-data {
    @include display-flex;
    font-size: 15px;
    height: 100px;
    color: #999999;
  }
}
</style>
