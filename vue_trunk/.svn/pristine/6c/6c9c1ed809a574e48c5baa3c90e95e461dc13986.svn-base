<template>
  <Page class="make-plan" :withAppBar="!globalConfig.isWx">
    <!-- 导航栏 -->
    <AppBar class="app-bar" v-if="!globalConfig.isWx">
      <img
        slot="left"
        src="../../assets/imgs/common/icon/icon_back.png"
        class="icon icon-back"
        @click="goBack"
      />
      <template slot="center">
        制作规划书
      </template>
    </AppBar>

    <!-- 主体 -->
    <AppContent class="app-content">
      <!-- 被保人信息 -->
      <Insurant ref="insurantRef" @chooseInsurant="chooseInsurant" />

      <!-- 投保人信息 -->
      <Applicant
        ref="applicantRef"
        @chooseApplicant="chooseApplicant"
        @changeRelation="changeRelation"
      />

      <!-- 险种信息 -->
      <ProductMsg @addProduct="addProduct" @delRisk="delRisk" />

      <!-- 按钮组 -->
      <RiskSaveButton v-if="mainProposalProductList.length != 0" />
    </AppContent>
  </Page>
</template>

<script>
import Applicant from "@/components/plan/Applicant";
import Insurant from "@/components/plan/Insurant";
import ProductMsg from "@/components/plan/ProductMsg";
import RiskSaveButton from "@/components/plan/RiskSaveButton";
import { mapState } from "vuex";
export default {
  name: "makePlan",
  components: {
    Applicant,
    Insurant,
    ProductMsg,
    RiskSaveButton
  },
  computed: {
    ...mapState({
      insurant: state => state.plan.insurant, //被保人
      applicant: state => state.plan.applicant, //投保人
      mainProposalProductList: state => state.plan.mainProposalProductList, //主险列表
      riskProposalProductList: state => state.plan.riskProposalProductList, //附加险列表
      totalPremium: state => state.plan.totalPremium, //总保费
      totalAmount: state => state.plan.totalAmount //总保额
    })
  },
  data() {
    return {};
  },
  watch: {},
  created() {
    this.initPage();
  },
  methods: {
    //初始化页面
    initPage() {
      //有主险，就要保费试算
      if (this.mainProposalProductList.length != 0) {
        this.calcPremium();
      }
    },
    //保费试算
    calcPremium() {
      const params = this.initCalcParams();
      // console.log(params);
      utils.http.post(interfaces.plan.premiumCalc, params).then(res => {
        //总保费
        this.$store.commit("plan/setState", {
          attr: "totalPremium",
          data: res.trialPremiumMobile.insurantProductList[0].plan.totalPremium
        });
        //总保额
        this.$store.commit("plan/setState", {
          attr: "totalAmount",
          data: res.trialPremiumMobile.insurantProductList[0].plan.totalAmount
        });
      });
    },
    //保费试算参数拼接
    initCalcParams() {
      //处理主险配置
      let mainProposalProductItem = JSON.parse(
        JSON.stringify(this.mainProposalProductList[0])
      ); //主险项
      let attList = mainProposalProductItem.attList; //主险的配置项
      let mainSetting = {
        shebao: mainProposalProductItem.shebao || this.insurant.shebao,
        premiumDes: mainProposalProductItem.premium
      };
      attList.forEach(element => {
        switch (element.attCode) {
          case "drawMode": //领取方式
            mainSetting.drawMode = element.attValue;
            break;
          case "policyPeriod": //保险期限
            mainSetting.policyPeriod = element.attValue;
            break;
          case "payPeriod": //交费期间
            mainSetting.payPeriod = element.attValue;
            break;
          case "payMode": //缴费方式
            mainSetting.payMode = element.attValue;
            break;
        }
      });
      //处理投保人
      let applicant = JSON.parse(JSON.stringify(this.applicant));
      applicant.birthdate = new Date(applicant.birthdate);
      applicant.birthday = new Date(applicant.birthdate);
      applicant.jobLevel = applicant.cdOccupation.occupationRiskLevel;
      applicant.job = applicant.cdOccupation.occupationCode;

      //处理被保人
      let insurant = JSON.parse(JSON.stringify(this.insurant));
      insurant.birthdate = new Date(insurant.birthdate);
      insurant.birthday = new Date(insurant.birthdate);
      insurant.jobLevel = insurant.cdOccupation.occupationRiskLevel;
      insurant.job = insurant.cdOccupation.occupationCode;
      //处理附加险种
      mainProposalProductItem.extraList = this.riskProposalProductList;
      mainProposalProductItem.extraList.forEach(item => {
        item.premiumDes = item.premium;
        item.isSelect = true;
        item.attList.forEach(el => {
          switch (el.attCode) {
            case "exceptAmt": //次免赔额
              item.exceptAmt = el.attValue;
              break;
            case "claimRate": //次免赔额
              item.claimRate = el.attValue;
              break;
            case "policyPeriod": //保险期限
              item.policyPeriod = el.attValue;
              break;
            case "payPeriod": //交费期间
              item.payPeriod = el.attValue;
              break;
            case "payMode": //缴费方式
              item.payMode = el.attValue;
              break;
          }
        });
      });
      let params = {
        proposalPlan: {
          bookId: this.mainProposalProductList[0].bookId,
          holder: applicant, //投保人
          insurantProductList: [
            {
              insurant: insurant, //被保人
              insuredId: "",
              planId: "",
              planInsureDate: "",
              productList: [
                Object.assign(mainProposalProductItem, mainSetting)
              ], //主险种
              proposalId: "",
              totalPremium: "0"
            }
          ], //主险
          orgAgent: {
            agent: {
              email: "",
              mobile: "",
              personCode: "",
              personId: "",
              personName: "",
              sex: "",
              telephone: ""
            },
            channel: "iwechat1",
            deviceNo: "572032449254344960",
            loginCode: "",
            openId: "oT-9Av8nXoxn3qnlDjopfnu8VHyI",
            token: ""
          },
          totalAmount: this.totalAmount,
          totalPremium: this.totalPremium
        }
      };
      return params;
    },
    // 返回
    goBack() {
      //主险清空
      this.$store.commit("plan/setState", {
        attr: "mainProposalProductList",
        data: []
      });
      //附加清空
      this.$store.commit("plan/setState", {
        attr: "riskProposalProductList",
        data: []
      });
      //总保费清空
      this.$store.commit("plan/setState", {
        attr: "totalPremium",
        data: ""
      });
      //总保额清空
      this.$store.commit("plan/setState", {
        attr: "totalAmount",
        data: ""
      });
      //投保人清空
      this.$store.commit("plan/setState", {
        attr: "applicant",
        data: {
          name: "",
          sex: "0", //性别
          birthdate: "",
          //职业信息
          cdOccupation: {
            occupationCode: "",
            occupationLevel: "",
            occupationName: "",
            occupationRiskLevel: "",
            occupationRiskMetical: ""
          },

          isoldCustomer: "0" //默认是新客户
        }
      });
      //被保人清空
      this.$store.commit("plan/setState", {
        attr: "insurant",
        data: {
          name: "",
          sex: "0",
          birthdate: "",
          //职业信息
          cdOccupation: {
            occupationCode: "",
            occupationLevel: "",
            occupationName: "",
            occupationRiskLevel: "",
            occupationRiskMetical: ""
          },
          isoldCustomer: "0", //默认是新客户
          holderRelation: "" //关系
        }
      });
      this.go("planList");
    },
    //添加险种
    addProduct() {
      if (!this.isMsgEmpty()) return;
      let applicant = this.applicant; //投保人信息
      let insurant = this.insurant; //被保人信息
      this.goWithQuery("insuranceSelect", {
        applicantBirthday: applicant.birthdate, //投保人生日
        insurantBirthday: insurant.birthdate, //被保人生日
        insurantSex: insurant.sex, //被保人性别
        holderRelation: applicant.holderRelation //关系
      });
    },
    //删除险种
    delRisk(data) {
      if (data.deltType == "main") {
        //删除的是主险种
        //主险清空
        utils.ui.confirm({
          msg: "确定删除吗？",
          btnList: [
            {
              msg: "确定",
              cb: () => {
                this.$store.commit("plan/setState", {
                  attr: "mainProposalProductList",
                  data: []
                });
                //附加清空
                this.$store.commit("plan/setState", {
                  attr: "riskProposalProductList",
                  data: []
                });
                //总保费清空
                this.$store.commit("plan/setState", {
                  attr: "totalPremium",
                  data: ""
                });
                //总保额清空
                this.$store.commit("plan/setState", {
                  attr: "totalAmount",
                  data: ""
                });
              }
            },
            {
              msg: "取消",
              cb: () => {
                // utils.ui.tips("继续保持");
              }
            }
          ]
        });
      } else {
        //删除的是附加险种
        //附加重置
        utils.ui.confirm({
          msg: "确定删除吗？",
          btnList: [
            {
              msg: "确定",
              cb: () => {
                this.$store.commit("plan/setState", {
                  attr: "riskProposalProductList",
                  data: this.riskProposalProductList.filter((item, index) => {
                    return index != data.delIndex;
                  })
                });
                //总保费重置
                this.$store.commit("plan/setState", {
                  attr: "totalPremium",
                  data: this.totalPremium - data.delObj.premium
                });
                //总保费重置
                this.$store.commit("plan/setState", {
                  attr: "totalAmount",
                  data: this.totalAmount - data.delObj.amount
                });
              }
            },
            {
              msg: "取消",
              cb: () => {
                // utils.ui.tips("继续保持");
              }
            }
          ]
        });
      }
    },
    //选择关系
    changeRelation(holderRelation) {
      let isSelf = holderRelation == "00" ? true : false; //是否是本人
      if (isSelf) {
        //本人
        this.$nextTick(() => {
          let insurant = JSON.parse(JSON.stringify(this.insurant));
          delete insurant.holderRelation;
          this.$store.commit("plan/setState", {
            attr: "applicant",
            data: insurant
          });
        });
      } else {
        //非本人
        this.$nextTick(() => {
          this.$store.commit("plan/setState", {
            attr: "applicant",
            data: {
              name: "",
              sex: "0", //性别
              birthdate: "",
              //职业信息
              cdOccupation: {
                occupationCode: "",
                occupationLevel: "",
                occupationName: "",
                occupationRiskLevel: "",
                occupationRiskMetical: ""
              },
              isoldCustomer: "0", //默认是新客户
              holderRelation: holderRelation
            }
          });
        });
        this.chooseApplicant();
      }
    },
    //选择被保人
    chooseInsurant() {
      this.goWithQuery("chooseCustomer", { id: 0 });
    },
    //选择投保人
    chooseApplicant() {
      if (this.insurant.name == "") {
        utils.ui.confirm("请先选择被保人");
        return;
      }
      if (this.applicant.holderRelation == "") {
        utils.ui.confirm("请先选择关系");
        return;
      }
      if (this.applicant.holderRelation == "00") return;
      this.goWithQuery("chooseCustomer", { id: 1 });
    },
    //校验投、被保人信息
    isMsgEmpty() {
      let applicantBirthday = utils.format.getAge(this.applicant.birthdate);
      if (this.insurant.name == "") {
        utils.ui.confirm("请先选择被保人");
        return false;
      }
      if (this.insurant.birthdate == "") {
        utils.ui.confirm("请选择被保人出生日期");
        return false;
      }

      if (this.insurant.cdOccupation.occupationCode == "") {
        utils.ui.confirm("请选择被保人职业");
        return false;
      }
      if (this.insurant.holderRelation == "") {
        utils.ui.confirm("请选择关系");
        return false;
      }
      if (this.applicant.name == "") {
        utils.ui.confirm("请选择投保人");
        return false;
      }
      if (this.applicant.birthdate == "") {
        utils.ui.confirm("请选择投保人出生日期");
        return false;
      }
      if (applicantBirthday < 16) {
        utils.ui.confirm("投保人年龄不能小于16岁");
        return false;
      }
      if (this.insurant.cdOccupation.occupationCode == "") {
        utils.ui.confirm("请选择投保人职业");
        return false;
      }
      return true;
    }
  },
  beforeRouteLeave(to, from, next) {
    if (
      this.$refs.applicantRef.$refs.jobSelector.showSelector ||
      this.$refs.insurantRef.$refs.jobSelector.showSelector
    ) {
      // 有选择器为打开状态，先关闭
      this.$refs.applicantRef.$refs.jobSelector.close();
      this.$refs.insurantRef.$refs.jobSelector.close();
      next(false);
    } else {
      next();
    }
  }

  // activated() {
  //   console.log(this.$store.state.plan.insurant);
  //   console.log(this.$store.state.plan.applicant);
  // }
};
</script>

<style lang="scss" scoped>
.make-plan {
  .app-bar {
    .icon {
      height: auto;
      &.icon-back {
        width: 11.5px;
      }
    }
  }
}
</style>
