<template>
  <page class="user-info">
    <!-- 用户信息 -->
    <section class="info-wrap">
      <!-- 姓名 -->
      <FormInput v-model="userInfo.name" label="姓名" disabled></FormInput>
      <!-- 性别 -->
      <FormRadio
        v-model="userInfo.sex"
        label="性别"
        :selectList="sexSelectList"
        disabled
      ></FormRadio>
      <!-- 生日 -->
      <FormDatepicker label="生日" v-model="userInfo.birthday"></FormDatepicker>
      <!-- 工号 -->
      <FormInput v-model="userInfo.agentCode" label="工号" disabled></FormInput>
      <!-- 所属机构 -->
      <FormBankWebsite
        :bankWebsite="bankWebsite"
        label="所属机构"
        placeholder="请选择所属机构"
        ref="fbws"
      ></FormBankWebsite>
      <!-- 手机号 -->
      <FormInput
        v-model="userInfo.phone"
        label="手机号"
        :iconSrc="arrowRightIconSrc"
        :iconWidth="7"
        @formInputClick="goToChangeMobile"
        @iconClick="goToChangeMobile"
        disabled
      ></FormInput>

      <!-- 修改密码 -->
      <div class="tool-bar">
        <button class="tool-btn" @click="goToChangePwd">修改密码 ></button>
      </div>
    </section>

    <!-- 保存按钮 -->
    <button v-show="showSaveBtn" class="save theme-btn" @click="save">
      保存
    </button>
  </page>
</template>

<script>
import FormInput from "@/components/common/form/FormInput";
import FormRadio from "@/components/common/form/FormRadio";
import FormDatepicker from "@/components/common/form/FormDatepicker";
import FormBankWebsite from "@/components/common/form/FormBankWebsite";
export default {
  name: "userInfo",
  components: {
    FormInput,
    FormRadio,
    FormDatepicker,
    FormBankWebsite
  },
  data() {
    return {
      // 个人信息对象
      userInfo: {},
      // 初始化的用户信息，用于做是否需要显示保存按钮
      initUserInfo: {},
      // 银行网点对象
      bankWebsite: {
        agentcom: "",
        bankName: ""
      },
      // 初始化的银行网点对象，用于做是否需要显示保存按钮
      initBankWebsite: {
        agentcom: "",
        bankName: ""
      },
      // 码表
      sexSelectList: globalCode.sex,
      arrowRightIconSrc: require("@/assets/imgs/common/icon/icon_arrow_right.png") // 右箭头图标
    };
  },
  computed: {
    // 是否显示保存按钮
    showSaveBtn() {
      const userInfo = JSON.parse(JSON.stringify(this.userInfo));
      const initUserInfo = JSON.parse(JSON.stringify(this.initUserInfo));
      // 排除phone，手机号码有自己的修改页，不走统一的修改方式
      Reflect.deleteProperty(userInfo, "phone");
      Reflect.deleteProperty(initUserInfo, "phone");

      // 判断个人信息&银行网点信息是否改变
      return (
        JSON.stringify(userInfo) !== JSON.stringify(initUserInfo) ||
        JSON.stringify(this.bankWebsite) !==
          JSON.stringify(this.initBankWebsite)
      );
    }
  },
  created() {
    // 初始化页面
    this.initPage();
  },
  beforeRouteLeave(to, from, next) {
    if (this.$refs.fbws.showSelector) {
      // 银行网点选择器打开，先关闭
      this.$refs.fbws.close();
      next(false);
    } else {
      next();
    }
  },
  methods: {
    // 初始化页面
    async initPage() {
      // 获取用户信息
      const userInfo = await this.getUserInfo();
      // 赋值userInfo，initUserInfo
      this.userInfo = userInfo;
      this.initUserInfo = JSON.parse(JSON.stringify(userInfo));
      // 赋值bankWebsite，initBankWebsite
      this.bankWebsite.agentcom = userInfo.agentcom;
      this.bankWebsite.bankName = userInfo.bankName;
      this.initBankWebsite.agentcom = userInfo.agentcom;
      this.initBankWebsite.bankName = userInfo.bankName;
    },
    // 获取个人信息
    getUserInfo() {
      return new Promise(resolve => {
        // 当前登录人的手机号
        const phone = this.$store.state.user.userInfo.phone;
        // 请求参数
        const params = {
          phone // 手机号
        };
        utils.http
          .post(interfaces.user.getUserInfoByPhone, params)
          .then(res => {
            res.birthday = res.birthday.replace(/\//g, "-");
            // 更新userInfo
            this.$store.commit("user/setState", {
              attr: "userInfo",
              data: res
            });
            resolve(res);
          });
      });
    },
    // 跳转到修改手机页面
    goToChangeMobile() {
      this.go("changeMobile");
    },
    // 跳转到修改密码页面
    goToChangePwd() {
      this.goWithQuery("changePwd", {
        mobile: this.userInfo.phone
      });
    },
    // 保存
    save() {}
  }
};
</script>

<style lang="scss" scoped>
.user-info {
  padding-top: 10px;
}
.info-wrap {
  margin-bottom: 30px;
  /deep/ .f-label {
    .label {
      margin-left: -10px;
    }
  }
}
.tool-bar {
  @include display-flex;
  justify-content: space-between;
  margin: 12px 20px 20px;
  .tool-btn {
    @include reset-button;
    color: #fa7070;
    font-size: 13px;
    &.vali-code {
      font-size: 14px;
      color: #6c6c6c;
    }
  }
}
</style>
