<template>
  <Page class="insurance-select" :withAppBar="!globalConfig.isWx">
    <!-- 导航栏 -->
    <AppBar class="app-bar" v-if="!globalConfig.isWx">
      <template slot="center">
        爱心人寿险种选择
      </template>
    </AppBar>

    <!-- 主体 -->
    <AppContent class="app-content" v-if="mainInsurancList != 0">
      <!-- 主险列表 -->
      <div class="main-list">
        <MainRiskItem
          v-for="(item, index) in mainInsurancList"
          :key="index"
          :itemObj="item"
          :selectCode="selectMainCode"
          @handleSelect="handleSelectMain"
        />
      </div>
      <!------------------------主险配置start---------------------------------------------->
      <!-- 配置选项1----------- 缴费方式 -->
      <RiskSettingSelect
        label="领取方式"
        :list="mainSetting.drawModeList"
        :selectCode="mainSetting.drawMode"
        @handle="handleDrawMode"
        v-if="mainSetting.drawModeList.length != 0"
      />
      <!-- 配置选项2----------- 保险期限 -->
      <RiskSettingSelect
        label="保险期限"
        :list="mainSetting.policyPeriodList"
        :selectCode="mainSetting.policyPeriod"
        @handle="handlePolicyPeriod"
        v-if="mainSetting.policyPeriodList.length != 0"
      />
      <!-- 配置选项3----------- 交费期间 -->
      <RiskSettingSelect
        label="交费期间"
        :list="mainSetting.payPeriodList"
        :selectCode="mainSetting.payPeriod"
        @handle="handlePayPeriod"
        v-if="mainSetting.payPeriodList.length != 0"
      />
      <!-- 配置选项4----------- 缴费方式 -->
      <RiskSettingSelect
        label="缴费方式"
        :list="mainSetting.payModeList"
        :selectCode="mainSetting.payMode"
        @handle="handlePayMode"
        v-if="mainSetting.payModeList.length != 0"
      />
      <!-- 配置选项5----------- 年金开始领取年龄 -->
      <RiskSettingSelect
        label="年金开始领取年龄"
        :list="mainSetting.drawStartAgeList"
        :selectCode="mainSetting.drawStartAge"
        @handle="handleDrawStartAge"
        v-if="mainSetting.drawStartAgeList.length != 0"
      />
      <!-- 配置选项6----------- 年金领取频率 -->
      <RiskSettingSelect
        label="年金领取频率"
        :list="mainSetting.drawFreqList"
        :selectCode="mainSetting.drawFreq"
        @handle="handleDrawFreq"
        v-if="mainSetting.drawFreqList.length != 0"
      />
      <!-- 配置选项7----------- 责任类型 -->
      <RiskSettingRadio
        label="责任类型"
        :list="mainSetting.rankList"
        :selectCode="mainSetting.rank"
        @handle="handleRank"
        v-if="mainSetting.rankList.length != 0"
      />
      <!-- <p class="tips-one">*本险种首单基本保额须大于等于50万</p> -->
      <!-- 被保人类型 -->
      <!-- <InsurantType
        @handleInsurantType="handleInsurantType"
        :insurantTypeList="insurantTypeList"
        :selectCode="selectInsurantTypeCode"
      /> -->
      <!-- <p class="tips-two">(需依据体检结果评估被保险人是否获得优选费率)</p> -->
      <!------------------------主险配置end------------------------------------------------->
      <!-- 附加险 -->
      <div class="additional-list" v-if="additionalRiskList.length != 0">
        <h2>可选计划</h2>
        <AdditionalRisk :additionalRiskList="additionalRiskList" />
      </div>
      <!-- 按钮组 -->
      <div class="btns">
        <button class="cancel">取消</button>
        <button class="sure" @click="handleSure">确定</button>
      </div>
    </AppContent>
  </Page>
</template>

<script>
import MainRiskItem from "@/components/plan/MainRiskItem";
import AdditionalRisk from "@/components/plan/AdditionalRisk";
import RiskSettingSelect from "@/components/plan/RiskSettingSelect";
import RiskSettingRadio from "@/components/plan/RiskSettingRadio";
import { mapState } from "vuex";
//import InsurantType from "@/components/plan/InsurantType";
export default {
  name: "insuranceSelect",
  components: {
    MainRiskItem,
    RiskSettingSelect,
    RiskSettingRadio,
    AdditionalRisk
    // InsurantType
  },
  data() {
    return {
      //被选择的主险编码
      selectMainCode: "",
      //产品列表
      mainInsurancList: [],
      //主险种配置
      mainSetting: {
        //领取方式
        drawMode: "",
        //领取方式列表
        drawModeList: [],

        //被选择当保险期限
        policyPeriod: "",
        //保险期限列表
        policyPeriodList: [],

        //被选择的交费期间
        payPeriod: "",
        //交费期间列表
        payPeriodList: [],

        //缴费方式
        payMode: "",
        //缴费方式列表
        payModeList: [],

        //年金开始领取年龄
        drawStartAge: "",
        //年金开始领取年龄列表
        drawStartAgeList: [],

        //年金领取频率
        drawFreq: "",
        //年金领取频率列表
        drawFreqList: [],

        //责任类型
        rank: "",
        //责任类型列表
        rankList: []
      },
      // //被选择当被保人类型
      // selectInsurantTypeCode: "",
      // //被保人类型码表
      // insurantTypeList: [
      //   { code: "01", desc: "标准" },
      //   { code: "02", desc: "优选" }
      // ],

      //被选择的附加险
      selectAdditionalCode: "",
      //附加险列表
      additionalRiskList: []
    };
  },
  computed: {
    ...mapState({
      mainProposalProductList: state => state.plan.mainProposalProductList //主险列表
    })
  },
  watch: {},
  created() {
    this.initPage();
  },
  methods: {
    //选择主险
    handleSelectMain(item) {
      //被选择的主险
      this.selectMainCode = item.productCode;
      //附加险列表
      this.additionalRiskList = item.extraList;
      this.initMainSetting(item);
      console.log(this.additionalRiskList);
    },
    //选择主险初始化主险配置
    initMainSetting(item) {
      //主险种配置清空
      this.mainSetting = {
        drawMode: "",
        drawModeList: [],
        policyPeriod: "",
        policyPeriodList: [],
        payPeriod: "",
        payPeriodList: [],
        payMode: "",
        payModeList: [],
        drawStartAge: "",
        drawStartAgeList: [],
        drawFreq: "",
        drawFreqList: [],
        rank: "",
        rankList: []
      };
      //获取配置list
      item.attList.forEach(element => {
        switch (element.attCode) {
          case "drawMode": //领取方式
            this.mainSetting.drawModeList = element.attValueList;
            break;
          case "policyPeriod": //保险期限
            this.mainSetting.policyPeriodList = element.attValueList;
            break;
          case "payPeriod": //交费期间
            this.mainSetting.payPeriodList = element.attValueList;
            break;
          case "payMode": //缴费方式
            this.mainSetting.payModeList = element.attValueList;
            break;
          case "drawStartAge": //年金开始领取年龄
            this.mainSetting.drawStartAgeList = element.attValueList;
            break;
          case "drawFreq": //年金领取频率
            this.mainSetting.drawFreqList = element.attValueList;
            break;
          case "rank": //责任类型
            this.mainSetting.rankList = element.attValueList;
            break;
        }
      });
      //设置默认值
      item.additional.forEach(element => {
        switch (element.key) {
          case "drawMode": //领取方式
            this.mainSetting.drawMode = element.value.split(",")[0];
            break;
          case "policyPeriod": //保险期限
            this.mainSetting.policyPeriod = element.value.split(",")[0];
            break;
          case "payPeriod": //交费期间
            this.mainSetting.payPeriod = element.value.split(",")[0];
            break;
          case "payMode": //缴费方式
            this.mainSetting.payMode = element.value.split(",")[0];
            break;
          case "drawStartAge": //年金开始领取年龄
            this.mainSetting.drawStartAge = element.value.split(",")[0];
            break;
          case "drawFreq": //年金领取频率
            this.mainSetting.drawFreq = element.value.split(",")[0];
            break;
          case "protectionPlan": //责任类型
            this.mainSetting.rank = `duty_${element.value.split(",")[0]}`;
            break;
        }
      });
    },
    //选择领取方式
    handleDrawMode(item) {
      this.mainSetting.drawMode = item.code;
    },
    //选择保险期限
    handlePolicyPeriod(item) {
      this.mainSetting.policyPeriod = item.code;
    },
    //选择交费期间
    handlePayPeriod(item) {
      this.mainSetting.payPeriod = item.code;
    },
    //选择缴费方式
    handlePayMode(item) {
      this.mainSetting.payMode = item.code;
    },
    //年金开始领取年龄
    handleDrawStartAge(item) {
      this.mainSetting.drawStartAge = item.code;
    },
    //年金领取频率
    handleDrawFreq(item) {
      this.mainSetting.drawFreq = item.code;
    },
    //责任类型
    handleRank(item) {
      this.mainSetting.rank = item.code;
    },

    //配置项目点击事件
    handleInsurantType() {},
    //确定
    handleSure() {
      this.back();
    },
    //初始化页面
    initPage() {
      let applicantBirthday = this.$route.query.applicantBirthday;
      let insurantBirthday = this.$route.query.insurantBirthday;
      let insurantSex = this.$route.query.insurantSex;
      let holderRelation = this.$route.query.holderRelation;
      let userInfo = this.$store.state.user.userInfo;
      //获取主险
      let params = {
        agentDto: {
          agent: {
            channelId: userInfo.channelId, //渠道id
            personId: userInfo.infoId, //登陆人id
            qualificationId: ""
          },
          ldcom: {
            comcode: "",
            id: ""
          }
        },
        cusMemberInfo: {
          holderBrith: applicantBirthday, //投保人生日
          name: insurantBirthday, //被保人生日
          relation: holderRelation, //关系
          sex: insurantSex //被保人性别
        }
      };
      utils.http.post(interfaces.plan.getProductSetting, params).then(res => {
        this.mainInsurancList = res.productDefList; //产品列表
        this.defaultSetting();
      });
    },
    //从制作规划书页面跳转过来回带主险回显
    defaultSetting() {
      if (this.mainProposalProductList.length != 0) {
        let attList = this.mainProposalProductList[0].attList; //从vuex获取的配置的默认值
        let selectMainCode = this.mainProposalProductList[0].productCode; //从vuex获取主险编码
        let mainInsurancList = this.mainInsurancList; //产品列表
        let list = []; //配置list
        mainInsurancList.forEach(item => {
          if (item.productCode == selectMainCode) {
            list = item.attList;
          }
        });
        //主险回显
        this.selectMainCode = selectMainCode;
        //配置list回显
        list.forEach(element => {
          switch (element.attCode) {
            case "drawMode": //领取方式
              this.mainSetting.drawModeList = element.attValueList;
              break;
            case "policyPeriod": //保险期限
              this.mainSetting.policyPeriodList = element.attValueList;
              break;
            case "payPeriod": //交费期间
              this.mainSetting.payPeriodList = element.attValueList;
              break;
            case "payMode": //缴费方式
              this.mainSetting.payModeList = element.attValueList;
              break;
            case "drawStartAge": //年金开始领取年龄
              this.mainSetting.drawStartAgeList = element.attValueList;
              break;
            case "drawFreq": //年金领取频率
              this.mainSetting.drawFreqList = element.attValueList;
              break;
            case "rank": //责任类型
              this.mainSetting.rankList = element.attValueList;
              break;
          }
        });
        console.log(attList);
        //配置项回现
        attList.forEach(element => {
          switch (element.attCode) {
            case "drawMode": //领取方式
              this.mainSetting.drawMode = element.attValue;
              break;
            case "policyPeriod": //保险期限
              this.mainSetting.policyPeriod = element.attValue;
              break;
            case "payPeriod": //交费期间
              this.mainSetting.payPeriod = element.attValue;
              break;
            case "payMode": //缴费方式
              this.mainSetting.payMode = element.attValue;
              break;
            case "drawStartAge": //年金开始领取年龄
              this.mainSetting.drawStartAge = element.attValue;
              break;
            case "drawFreq": //年金领取频率
              this.mainSetting.drawFreq = element.attValue;
              break;
            case "rank": //责任类型
              this.mainSetting.rank = element.attValue;
              break;
          }
        });
      }
    }
  }
};
</script>

<style lang="scss" scoped>
.app-bar {
  .icon {
    height: auto;
    &.icon-back {
      width: 11.5px;
    }
  }
}
.insurance-select {
  background: $color-bg;
  .main-list {
    background: $color-bg;
    margin: 0 10px;
    padding: 14px 20px;
    box-shadow: 0 0 4px 1px #e5e9f1;
    border-radius: 0 0 5px 5px;
  }
  .tips-one {
    font-size: 12px;
    color: #fa7070;
    margin-left: 30px;
    margin-bottom: 5px;
  }
  .tips-two {
    font-size: 12px;
    color: #fa7070;
    margin-left: 30px;
    margin-bottom: 10px;
    margin-top: 10px;
  }
  .additional-list {
    background: $color-bg;
    margin: 0 10px;
    padding: 14px 20px;
    box-shadow: 0 0 4px 1px #e5e9f1;
    border-radius: 0 0 5px 5px;
    h2 {
      font-size: 15px;
      color: #333333;
      font-weight: normal;
      border-bottom: 1px solid #e5e9f1;
      padding-bottom: 8px;
      margin-bottom: 10px;
    }
  }
  .btns {
    padding: 40px 40px 20px 40px;
    @include display-flex;
    justify-content: space-around;
    .sure {
      background: $color-theme;
    }
    .cancel {
      color: $color-theme;
    }
    button {
      width: 102px;
      height: 38px;
      border: 1px solid $color-theme;
      border-radius: 19px;
      background: $color-bg;
      font-size: 18px;
    }
  }
}
</style>
